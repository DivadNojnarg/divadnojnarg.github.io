<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Hi, I am David</title>
    <link>https://divadnojnarg.github.io/blog/</link>
    <description>Recent content in Blogs on Hi, I am David</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>true</copyright>
    <lastBuildDate>Thu, 05 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://divadnojnarg.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build Bootstrap 4 dashboards with bs4Dash</title>
      <link>https://divadnojnarg.github.io/blog/bs4dash/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/bs4dash/</guid>
      <description>Introduction bs4Dash is now a cran package.
   
shinydashboard is currently build on top of AdminLT2 and uses bootstrap 3. Yet, bootstrap 4 is already released and nothing was available for shiny, regarding dashboards. bs4Dash is built on top of AdminLTE3 and bring also extra components from boostrap 4. The syntax is very close to that of shinydashboard so that users are not lost.
Installation You can install this package from CRAN or the latest dev version via github:</description>
    </item>
    
    <item>
      <title>Save your R packages when updating R version</title>
      <link>https://divadnojnarg.github.io/blog/rpackages_save/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/rpackages_save/</guid>
      <description>This post is a copy and paste of an r-blogger article.
However, it is so useful that I keep it here to remember about the process to save and restore all R packages when updating to a newer version of R.
 Before you upgrade, build a temp file with all of your old packages.  tmp &amp;lt;- installed.packages() installedpkgs &amp;lt;- as.vector(tmp[is.na(tmp[,&amp;quot;Priority&amp;quot;]), 1]) save(installedpkgs, file=&amp;quot;installed_old.rda&amp;quot;)   Install the new version of R and let it do itâ€™s thing.</description>
    </item>
    
    <item>
      <title>Track a website usage with hotjar</title>
      <link>https://divadnojnarg.github.io/blog/shinyapp_hotjar/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/shinyapp_hotjar/</guid>
      <description>A web tracking tool I often use is hotjar. Below is a heatmap showing all the users click in the past week in my personal website. I am keen on this kind of feedback since it summarizes everything at a glance. The screenshot you can see only takes into account click events. However, you can also see users moves or how they scroll on your website.

The table below shows where your visitors are from, how much time they spend on a given page, with which web browser and when.</description>
    </item>
    
    <item>
      <title>Build awesome dashboards with shiny</title>
      <link>https://divadnojnarg.github.io/blog/awesomedashboards/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/awesomedashboards/</guid>
      <description>Important Note I recently released shinydashboardPlus on CRAN.
 
Therefore, some of the functions below are now included in the package.
Introduction shinydashboard is without any doubt a great package. Even though built upon the famous free adminLTE2 dashboard template (boostrap 3), most of the dashboard I see almost look the same. In the shinydashboard package, some adminLTE2 components are not implemented such as the right sidebar, which can be extremely useful: contains input, parameters, &amp;hellip; But everything you need is hidden under the hood, in the inst/AdminLTE folder (shinydashboard github).</description>
    </item>
    
    <item>
      <title>Make beautiful CVs with shiny and AdminLTE2</title>
      <link>https://divadnojnarg.github.io/blog/shinycvs/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/shinycvs/</guid>
      <description>shinyCV  Amazing HTML CVs based upon adminLTE2 template
  https://adminlte.io/themes/AdminLTE ( main theme) Will be released to CRAN as soon as possible  Package Installation library(devtools) install_github(&amp;quot;DivadNojnarg/shinyCV&amp;quot;) library(shinyCV)  Introduction: Basic Workflow This package offers you two ways of creating nice CVs based on the AdminLTE2 template.
With the build_shinyCV function  Launch the builder by using:  build_shinyCV()  Fill the form to build your cv step by step and save the current state at any time.</description>
    </item>
    
    <item>
      <title>Extend shinyWidgets: knobInput</title>
      <link>https://divadnojnarg.github.io/blog/knobinput/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/knobinput/</guid>
      <description>Introduction shiny basic package contains several widgets, available here. This database is continuously extended through the shinyWidget package developed by the dreamRs team. Here I present how we add a new knobInput widget to shinyWidget, with Victor Perrier from the dreamRs team.
I always wanted to play with some knobs in shiny, similarly as what we do with sliders. However, in spite of some research, I found nothing already implemented.</description>
    </item>
    
    <item>
      <title>How to customize shiny sliderInput</title>
      <link>https://divadnojnarg.github.io/blog/customsliderinput/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/customsliderinput/</guid>
      <description>Sometimes, you might get bored by the design of the sliders in Shiny. This input widget uses the Ion.Rangeslider js library. In the advanced section, you can notice that 5 themes are actually available. I really like the flat ui skin. In this tutorial, I will describe two ways to install new themes for your shiny sliders.
Use shinyWidgets Recently, I added 2 functions to the shinyWidgets package of Victor Perrier: - chooseSliderSkin that enables you to choose the global skin of all your sliders.</description>
    </item>
    
    <item>
      <title>Essential Shiny packages</title>
      <link>https://divadnojnarg.github.io/blog/bestofshiny/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/bestofshiny/</guid>
      <description>After several months of silence (I am very busy :)), I would like to share with you a &amp;ldquo;best of&amp;rdquo; of all Shiny packages you might need to build beautiful and powerful applications.
Enhance your apps with Javascript (still updated) The shinyjs package was designed by Dean Attali, https://deanattali.com/shinyjs/, a very famous shiny user. In summary, it allows you to add interactivity inside your app for example:
 hide/show/toggle widgets, graphs, tables reset inputs to their initial value enable/disable elements  These are the most outstanding properties of this package and require just a few lines of code to work.</description>
    </item>
    
    <item>
      <title>Upcoming Updates</title>
      <link>https://divadnojnarg.github.io/blog/todolist/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/todolist/</guid>
      <description>Future updates:
add a link to the second scientific article published upload the first shiny app in the Lorenz model section add all other shiny apps related to the Lorenz model open the shiny showcase section new icons update the Lotka Volterra App publish Shiny App of Calcium Homeostasis add a description part to the Calcium Homeostasis gallery add tutorials/articles in the teaching section  Last update: 22-10-17</description>
    </item>
    
    <item>
      <title>Setting MathJax with Hugo</title>
      <link>https://divadnojnarg.github.io/blog/mathjax/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/mathjax/</guid>
      <description>The classical approach MathJax is a javascript library which allows the user to integrate math expressions in a website or a blog. However, its configuration can be quite complex for beginners. In my previous website powered by Jekyll, I easily managed to install MathJax, whereas I encountered some problems with Hugo.
1. Installing MathJax via Hugo&amp;rsquo;s documentation Everything you need can be found here. You have to insert the code below in the /layout/partials folder of your website: it is even better to create a file named mathjax_support.</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://divadnojnarg.github.io/blog/hello/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://divadnojnarg.github.io/blog/hello/</guid>
      <description>Welcome to my new website. I am David, PhD in mathematical physiology, especially in renal physiology and calcium/phosphate metabolism. I have a great interest for new technologies especially those dedicated to improve the learning process, as well as scientific collaboration. I often noticed that some scientific topics are really complex, thereby classical courses may not be sufficient to integrate all this complexity. During the past 5 years, I built several mathematical models from developmental biology (somitogenesis) to calcium and phosphate homeostasis.</description>
    </item>
    
  </channel>
</rss>